import { useState, useEffect } from 'react';
import { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useAuth } from '@/hooks/useAuth';
import { isFirebaseAvailable } from '@/lib/firebase';
import { getFoodImageForDish, fetchRandomFoodImage } from '@/lib/foodApi';
import { 
  List, 
  Plus, 
  Eye, 
  EyeOff, 
  Edit, 
  Trash2, 
  X, 
  Save, 
  Loader2,
  Store,
  BarChart3,
  Clock,
  Star,
  Truck,
  UtensilsCrossed,
  ShoppingBag,
  Circle,
  CheckCircle,
  Medal,
  Award,
  Trophy,
  Warehouse,
  Wheat,
  Beef,
  Milk,
  Leaf,
  ChefHat,
  PieChart,
  Building,
  Timer,
  Package,
  TrendingUp
} from 'lucide-react';
import type { Manager, Restaurant, Order } from '@/types';

export default function ManagerDashboard() {
  const { user } = useAuth() as { user: Manager };
  const { toast } = useToast();
  const [mockOrderUpdates, setMockOrderUpdates] = useState<Record<string, string>>({});
  const [foodImages, setFoodImages] = useState<Record<string, string>>({});
  const [menuItems, setMenuItems] = useState<any[]>([]);
  const [showAddItemForm, setShowAddItemForm] = useState(false);
  const [showInventoryUpdate, setShowInventoryUpdate] = useState(false);
  const [editingItem, setEditingItem] = useState<any>(null);

  // Mock data for demo purposes when Firebase is not available
  const mockRestaurant: Restaurant = {
    id: 'restaurant-1',
    name: 'Canteen Delight',
    description: 'Serving delicious, fresh meals for tech park employees with authentic flavors and quick service',
    cuisine: 'Multi-cuisine',
    rating: 4.5,
    preparationTime: '25-30 mins',
    estimatedTime: '25-30 mins',
    priceRange: '₹80-200',
    isOpen: true,
    deliveryAvailable: true,
    takeawayAvailable: true,
    dineinAvailable: true,
    imageUrl: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop&crop=center',
    distance: 0.2,
  };

  const mockOrders: Order[] = [
    {
      id: 'order-1',
      orderNumber: 'ORD001',
      userId: 'user-1',
      restaurantId: 'restaurant-1',
      orderType: 'delivery',
      status: 'pending',
      subtotal: 360,
      deliveryCharge: 30,
      gst: 0,
      total: 390,
      totalAmount: 390,
      paymentMethod: 'UPI',
      paymentStatus: 'completed',
      deliveryAddress: 'Building A, Floor 3, Manyata Tech Park',
      estimatedTime: '30 mins',
      createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
      items: [
        {
          id: 'item-1',
          orderId: 'order-1',
          menuItemId: 'menu-1',
          name: 'Chicken Biryani',
          price: 180,
          quantity: 2,
          total: 360,
          image: foodImages['chicken biryani'] || 'https://images.unsplash.com/photo-1599487488170-d11ec9c172f0?w=100&h=100&fit=crop&crop=center',
        },
        {
          id: 'item-2',
          orderId: 'order-1',
          menuItemId: 'menu-2',
          name: 'Raita',
          price: 30,
          quantity: 1,
          total: 30,
          image: foodImages['raita'] || 'https://images.unsplash.com/photo-1585937421612-70a008356fbe?w=100&h=100&fit=crop&crop=center',
        },
      ],
    },
    {
      id: 'order-2',
      orderNumber: 'ORD002',
      userId: 'user-2',
      restaurantId: 'restaurant-1',
      orderType: 'takeaway',
      status: 'preparing',
      subtotal: 120,
      deliveryCharge: 0,
      gst: 0,
      total: 120,
      totalAmount: 120,
      paymentMethod: 'Card',
      paymentStatus: 'completed',
      deliveryAddress: 'Building B, Floor 1, Manyata Tech Park',
      estimatedTime: '20 mins',
      createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
      items: [
        {
          id: 'item-3',
          orderId: 'order-2',
          menuItemId: 'menu-3',
          name: 'Veg Thali',
          price: 120,
          quantity: 1,
          total: 120,
          image: foodImages['veg thali'] || 'https://images.unsplash.com/photo-1565557623262-b51c2513a641?w=100&h=100&fit=crop&crop=center',
        },
      ],
    },
    {
      id: 'order-3',
      orderNumber: 'ORD003',
      userId: 'user-3',
      restaurantId: 'restaurant-1',
      orderType: 'dine-in',
      status: 'ready',
      subtotal: 200,
      deliveryCharge: 0,
      gst: 0,
      total: 200,
      totalAmount: 200,
      paymentMethod: 'Cash',
      paymentStatus: 'completed',
      deliveryAddress: 'Building C, Floor 2, Manyata Tech Park',
      estimatedTime: '15 mins',
      createdAt: new Date(Date.now() - 45 * 60 * 1000).toISOString(),
      items: [
        {
          id: 'item-4',
          orderId: 'order-3',
          menuItemId: 'menu-4',
          name: 'Paneer Butter Masala',
          price: 150,
          quantity: 1,
          total: 150,
          image: foodImages['paneer butter masala'] || 'https://images.unsplash.com/photo-1565557623262-b51c2513a641?w=100&h=100&fit=crop&crop=center',
        },
        {
          id: 'item-5',
          orderId: 'order-3',
          menuItemId: 'menu-5',
          name: 'Naan',
          price: 25,
          quantity: 2,
          total: 50,
          image: foodImages['naan'] || 'https://images.unsplash.com/photo-1585937421612-70a008356fbe?w=100&h=100&fit=crop&crop=center',
        },
      ],
    },
  ];

  // Mock menu items data
  const mockMenuItems = [
    {
      id: 'menu-1',
      name: 'Paneer Butter Masala',
      price: 120,
      description: 'Creamy tomato-based curry with fresh paneer',
      category: 'Main Course',
      isAvailable: true,
      image: 'https://images.unsplash.com/photo-1565557623262-b51c2513a641?w=100&h=100&fit=crop&crop=center',
    },
    {
      id: 'menu-2',
      name: 'Butter Naan',
      price: 25,
      description: 'Soft and fluffy bread with butter',
      category: 'Bread',
      isAvailable: true,
      image: 'https://images.unsplash.com/photo-1585937421612-70a008356fbe?w=100&h=100&fit=crop&crop=center',
    },
    {
      id: 'menu-3',
      name: 'Chicken Curry',
      price: 160,
      description: 'Spicy chicken curry with aromatic spices',
      category: 'Main Course',
      isAvailable: false,
      image: 'https://images.unsplash.com/photo-1599487488170-d11ec9c172f0?w=100&h=100&fit=crop&crop=center',
    },
    {
      id: 'menu-4',
      name: 'Masala Dosa',
      price: 80,
      description: 'Crispy crepe filled with spiced potatoes',
      category: 'South Indian',
      isAvailable: true,
      image: 'https://images.unsplash.com/photo-1585937421612-70a008356fbe?w=100&h=100&fit=crop&crop=center',
    },
    {
      id: 'menu-5',
      name: 'Cold Coffee',
      price: 60,
      description: 'Refreshing iced coffee with cream',
      category: 'Beverages',
      isAvailable: true,
      image: 'https://images.unsplash.com/photo-1461023058943-07fcbe16d735?w=100&h=100&fit=crop&crop=center',
    },
  ];

  // Load food images when component mounts
  useEffect(() => {
    const loadFoodImages = async () => {
      const dishNames = ['chicken biryani', 'raita', 'veg thali', 'paneer butter masala', 'naan', 'masala dosa', 'cold coffee', 'chicken curry'];
      const imagePromises = dishNames.map(async (dish) => {
        try {
          const image = await getFoodImageForDish(dish);
          return { dish, image };
        } catch (error) {
          console.warn(`Failed to load image for ${dish}:`, error);
          return { dish, image: null };
        }
      });

      const results = await Promise.all(imagePromises);
      const newImages: Record<string, string> = {};
      
      results.forEach(({ dish, image }) => {
        if (image) {
          newImages[dish] = image;
        }
      });

      setFoodImages(newImages);
    };

    loadFoodImages();
    
    // Initialize menu items
    setMenuItems(mockMenuItems);
  }, []);

  const { data: restaurant, isLoading: restaurantLoading } = useQuery<Restaurant>({
    queryKey: ['/api/manager', user.id, 'restaurant'],
    enabled: !!user?.id,
    queryFn: async () => {
      if (isFirebaseAvailable()) {
        const response = await fetch(`/api/manager/${user.id}/restaurant`);
        if (!response.ok) {
          throw new Error('Failed to fetch restaurant data');
        }
        return response.json();
      } else {
        // Return mock data when Firebase is not available
        return mockRestaurant;
      }
    },
  });

  const { data: orders, isLoading: ordersLoading } = useQuery<Order[]>({
    queryKey: ['/api/orders/restaurant', restaurant?.id, mockOrderUpdates],
    enabled: !!restaurant?.id,
    queryFn: async () => {
      if (isFirebaseAvailable()) {
        const response = await fetch(`/api/orders/restaurant/${restaurant?.id}`);
        if (!response.ok) {
          throw new Error('Failed to fetch orders');
        }
        return response.json();
      } else {
        // Return mock data with updates when Firebase is not available
        return mockOrders.map(order => ({
          ...order,
          status: mockOrderUpdates[order.id] || order.status,
        }));
      }
    },
  });

  const updateOrderStatusMutation = useMutation({
    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {
      if (isFirebaseAvailable()) {
        const response = await apiRequest('PUT', `/api/orders/${orderId}/status`, { status });
        return response.json();
      } else {
        // Mock update for demo purposes
        return { success: true, orderId, status };
      }
    },
    onSuccess: (updatedOrder, variables) => {
      if (isFirebaseAvailable()) {
        queryClient.invalidateQueries({ queryKey: ['/api/orders/restaurant'] });
      } else {
        // Update mock order state
        setMockOrderUpdates(prev => ({
          ...prev,
          [variables.orderId]: variables.status,
        }));
      }
      
      const getStatusUpdateMessage = (status: string) => {
        switch (status) {
          case 'preparing':
            return {
              title: '👨‍🍳 Order Accepted',
              description: `Order ${updatedOrder?.orderNumber || ''} is now being prepared. Customer has been notified.`,
              variant: undefined
            };
          case 'ready':
            return {
              title: '🍽️ Order Ready',
              description: `Order ${updatedOrder?.orderNumber || ''} is ready for pickup/delivery. Customer has been notified.`,
              variant: undefined
            };
          case 'dispatched':
            return {
              title: '🚛 Order Dispatched',
              description: `Order ${updatedOrder?.orderNumber || ''} is now out for delivery. Customer is tracking the order.`,
              variant: undefined
            };
          case 'delivered':
            return {
              title: '✅ Order Completed',
              description: `Order ${updatedOrder?.orderNumber || ''} has been successfully delivered. Great job!`,
              variant: undefined
            };
          case 'cancelled':
            return {
              title: '❌ Order Cancelled',
              description: `Order ${updatedOrder?.orderNumber || ''} has been cancelled. Customer has been notified.`,
              variant: 'destructive' as const
            };
          default:
            return {
              title: '📋 Order Updated',
              description: `Order status has been updated to ${status}.`,
              variant: undefined
            };
        }
      };

      const message = getStatusUpdateMessage(variables.status);
      const toastOptions: any = {
        title: message.title,
        description: message.description,
        duration: 4000,
      };
      
      if (message.variant) {
        toastOptions.variant = message.variant;
      }
      
      toast(toastOptions);
    },
    onError: () => {
      toast({
        variant: 'destructive',
        title: '❌ Update Failed',
        description: 'Failed to update order status. Please try again.',
      });
    },
  });

  const handleOrderStatusUpdate = (orderId: string, status: string) => {
    updateOrderStatusMutation.mutate({ orderId, status });
  };

  // Menu management mutations
  const updateMenuItemMutation = useMutation({
    mutationFn: async ({ itemId, updates }: { itemId: string; updates: any }) => {
      if (isFirebaseAvailable()) {
        const response = await apiRequest('PUT', `/api/menu/items/${itemId}`, updates);
        return response.json();
      } else {
        // Mock update for demo
        return { success: true, itemId, updates };
      }
    },
    onSuccess: (updatedItem, variables) => {
      if (isFirebaseAvailable()) {
        queryClient.invalidateQueries({ queryKey: ['/api/menu/restaurant'] });
      } else {
        // Update local state for demo
        setMenuItems(prev => prev.map(item => 
          item.id === variables.itemId 
            ? { ...item, ...variables.updates }
            : item
        ));
      }
      
      const action = variables.updates.isAvailable !== undefined ? 'Status Updated' : 'Item Updated';
      toast({
        title: `Item ${action}`,
        description: `Menu item has been ${action.toLowerCase()}`,
      });
    },
    onError: () => {
      toast({
        variant: 'destructive',
        title: 'Update Failed',
        description: 'Failed to update menu item. Please try again.',
      });
    },
  });

  const deleteMenuItemMutation = useMutation({
    mutationFn: async (itemId: string) => {
      if (isFirebaseAvailable()) {
        const response = await apiRequest('DELETE', `/api/menu/items/${itemId}`);
        return response.json();
      } else {
        // Mock delete for demo
        return { success: true, itemId };
      }
    },
    onSuccess: (result, itemId) => {
      if (isFirebaseAvailable()) {
        queryClient.invalidateQueries({ queryKey: ['/api/menu/restaurant'] });
      } else {
        // Update local state for demo
        const item = menuItems.find(item => item.id === itemId);
        setMenuItems(prev => prev.filter(item => item.id !== itemId));
        
        toast({
          title: 'Item Deleted',
          description: `${item?.name} has been removed from the menu`,
          variant: 'destructive',
        });
      }
    },
    onError: () => {
      toast({
        variant: 'destructive',
        title: 'Delete Failed',
        description: 'Failed to delete menu item. Please try again.',
      });
    },
  });

  const addMenuItemMutation = useMutation({
    mutationFn: async (newItem: any) => {
      if (isFirebaseAvailable()) {
        const itemData = {
          ...newItem,
          restaurantId: restaurant?.id,
          categoryId: '1', // Default category, should be dynamic
          isVeg: true,
          isAvailable: true,
        };
        const response = await apiRequest('POST', '/api/menu/items', itemData);
        return response.json();
      } else {
        // Mock create for demo
        return {
          ...newItem,
          id: `menu-${Date.now()}`,
          image: foodImages[newItem.name.toLowerCase()] || 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=100&h=100&fit=crop&crop=center',
        };
      }
    },
    onSuccess: (newItem) => {
      if (isFirebaseAvailable()) {
        queryClient.invalidateQueries({ queryKey: ['/api/menu/restaurant'] });
      } else {
        // Update local state for demo
        setMenuItems(prev => [...prev, newItem]);
      }
      
      setShowAddItemForm(false);
      toast({
        title: 'Item Added',
        description: `${newItem.name} has been added to the menu`,
      });
    },
    onError: () => {
      toast({
        variant: 'destructive',
        title: 'Add Failed',
        description: 'Failed to add menu item. Please try again.',
      });
    },
  });

  // Menu management functions
  const handleToggleItemAvailability = (itemId: string) => {
    const item = menuItems.find(item => item.id === itemId);
    if (!item) return;
    
    updateMenuItemMutation.mutate({
      itemId,
      updates: { isAvailable: !item.isAvailable }
    });
  };

  const handleDeleteItem = (itemId: string) => {
    deleteMenuItemMutation.mutate(itemId);
  };

  const handleAddItem = (newItem: any) => {
    addMenuItemMutation.mutate(newItem);
  };

  const handleEditItem = (itemId: string, updates: any) => {
    updateMenuItemMutation.mutate({ itemId, updates });
  };

  const handleInventoryUpdate = () => {
    setShowInventoryUpdate(true);
    
    // Simulate inventory update process
    setTimeout(() => {
      setShowInventoryUpdate(false);
      toast({
        title: 'Inventory Updated',
        description: 'Inventory levels have been successfully updated from supplier data.',
      });
    }, 2000);
  };

  if (restaurantLoading) {
    return (
      <div>
        <div className="flex items-center justify-between mb-8">
          <div>
            <Skeleton className="h-8 w-64 mb-2" />
            <Skeleton className="h-4 w-48" />
          </div>
          <Skeleton className="h-10 w-32" />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {[1, 2, 3].map((i) => (
            <Card key={i}>
              <CardContent className="p-6">
                <Skeleton className="h-24 w-full" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (!restaurant) {
    return (
      <div className="text-center py-12">
        <i className="fas fa-store-slash text-4xl text-muted-foreground mb-4"></i>
        <h3 className="text-lg font-semibold text-foreground mb-2">Restaurant Not Found</h3>
        <p className="text-muted-foreground">No restaurant is associated with your account.</p>
      </div>
    );
  }

  const newOrders = orders?.filter(order => order.status === 'placed') || [];
  const preparingOrders = orders?.filter(order => order.status === 'preparing') || [];
  const readyOrders = orders?.filter(order => order.status === 'ready') || [];

  const todayOrders = orders?.filter(order => {
    const orderDate = new Date(order.createdAt!);
    const today = new Date();
    return orderDate.toDateString() === today.toDateString();
  }) || [];

  const todayRevenue = todayOrders.reduce((sum, order) => sum + order.total, 0);

  return (
    <div>
      {/* Dashboard Header */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-foreground" data-testid="text-restaurant-name">
              {restaurant.name} Dashboard
            </h1>
            <p className="text-muted-foreground">Manage your menu and orders</p>
          </div>
          <div className="flex items-center space-x-4">
            <Badge 
              variant={restaurant.isOpen ? "default" : "destructive"}
              className="px-4 py-2"
              data-testid="badge-restaurant-status"
            >
              <Circle className={`h-4 w-4 mr-2 ${restaurant.isOpen ? 'text-chart-2 fill-chart-2' : 'text-destructive fill-destructive'}`} />
              Restaurant {restaurant.isOpen ? 'Open' : 'Closed'}
            </Badge>
          </div>
        </div>
        
        {/* Restaurant Info Card */}
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex items-start space-x-6">
              <div className="flex-shrink-0">
                <img 
                  src={restaurant.imageUrl || 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=400&h=300&fit=crop&crop=center'} 
                  alt={restaurant.name}
                  className="w-24 h-24 rounded-lg object-cover border-2 border-border"
                  onError={(e) => {
                    e.currentTarget.src = 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=100&h=100&fit=crop&crop=center';
                  }}
                />
              </div>
              <div className="flex-1">
                <h2 className="text-xl font-semibold text-foreground mb-2">{restaurant.name}</h2>
                <p className="text-muted-foreground mb-3">{restaurant.description}</p>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-foreground">Cuisine:</span>
                    <p className="text-muted-foreground">{restaurant.cuisine}</p>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Rating:</span>
                    <p className="text-muted-foreground flex items-center">
                      <i className="fas fa-star text-yellow-500 mr-1"></i>
                      {restaurant.rating}/5
                    </p>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Delivery Time:</span>
                    <p className="text-muted-foreground">{restaurant.estimatedTime || restaurant.preparationTime}</p>
                  </div>
                  <div>
                    <span className="font-medium text-foreground">Hours:</span>
                    <p className="text-muted-foreground">Open Daily 8:00 AM - 10:00 PM</p>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="orders" className="space-y-6">
        <TabsList>
          <TabsTrigger value="orders" data-testid="tab-live-orders">Live Orders</TabsTrigger>
          <TabsTrigger value="menu" data-testid="tab-menu-management">Menu Management</TabsTrigger>
          <TabsTrigger value="analytics" data-testid="tab-analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="orders" className="space-y-6">
          {ordersLoading ? (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {[1, 2, 3].map((i) => (
                <Card key={i}>
                  <CardContent className="p-6">
                    <Skeleton className="h-32 w-full" />
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* New Orders */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>New Orders</CardTitle>
                    <Badge variant="outline" data-testid="badge-new-orders">
                      {newOrders.length} pending
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {newOrders.length === 0 ? (
                    <div className="text-center py-8">
                      <i className="fas fa-inbox text-2xl text-muted-foreground mb-2"></i>
                      <p className="text-muted-foreground">No new orders</p>
                    </div>
                  ) : (
                    newOrders.map((order) => (
                      <Card key={order.id} className="border-l-4 border-l-chart-3">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <span className="font-medium text-foreground" data-testid={`text-order-${order.id}`}>
                              {order.orderNumber}
                            </span>
                            <span className="text-sm text-muted-foreground">
                              {new Date(order.createdAt!).toLocaleTimeString()}
                            </span>
                          </div>
                          <div className="flex items-center justify-between mb-3">
                            <span className="font-semibold">Total: ₹{order.totalAmount}</span>
                            <Badge 
                              variant={order.paymentMethod === 'UPI' ? 'default' : 'secondary'}
                              data-testid={`badge-order-type-${order.id}`}
                            >
                              {order.paymentMethod}
                            </Badge>
                          </div>
                          
                          {/* Order Items */}
                          <div className="mb-3">
                            <p className="text-sm font-medium text-muted-foreground mb-2">Items:</p>
                            <div className="space-y-2">
                              {order.items?.map((item, index) => (
                                <div key={index} className="flex items-center space-x-3">
                                  <img 
                                    src={item.image} 
                                    alt={item.name}
                                    className="w-8 h-8 rounded object-cover"
                                    onError={(e) => {
                                      e.currentTarget.src = 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=32&h=32&fit=crop&crop=center';
                                    }}
                                  />
                                  <div className="flex-1">
                                    <p className="text-sm font-medium">{item.name}</p>
                                    <p className="text-xs text-muted-foreground">
                                      Qty: {item.quantity} × ₹{item.price}
                                    </p>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                          
                          {order.specialInstructions && (
                            <div className="mb-3">
                              <p className="text-sm font-medium text-muted-foreground mb-1">Special Instructions:</p>
                              <p className="text-sm text-foreground bg-muted p-2 rounded">{order.specialInstructions}</p>
                            </div>
                          )}
                          
                          <div className="mb-3">
                            <p className="text-sm font-medium text-muted-foreground mb-1">Delivery Address:</p>
                            <p className="text-sm text-foreground">{order.deliveryAddress}</p>
                          </div>
                          <div className="flex space-x-2">
                            <Button
                              size="sm"
                              className="flex-1 bg-chart-2 hover:bg-chart-2/90"
                              onClick={() => handleOrderStatusUpdate(order.id, 'preparing')}
                              data-testid={`button-accept-${order.id}`}
                            >
                              Accept
                            </Button>
                            <Button
                              size="sm"
                              variant="destructive"
                              className="flex-1"
                              onClick={() => handleOrderStatusUpdate(order.id, 'cancelled')}
                              data-testid={`button-reject-${order.id}`}
                            >
                              Reject
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    ))
                  )}
                </CardContent>
              </Card>

              {/* Preparing Orders */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Preparing</CardTitle>
                    <Badge variant="outline" data-testid="badge-preparing-orders">
                      {preparingOrders.length} active
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {preparingOrders.length === 0 ? (
                    <div className="text-center py-8">
                      <i className="fas fa-clock text-2xl text-muted-foreground mb-2"></i>
                      <p className="text-muted-foreground">No orders preparing</p>
                    </div>
                  ) : (
                    preparingOrders.map((order) => (
                      <Card key={order.id} className="border-l-4 border-l-chart-3 bg-chart-3/5">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <span className="font-medium text-foreground">
                              {order.orderNumber}
                            </span>
                            <span className="text-sm text-chart-3 font-medium">
                              {order.estimatedTime || 'In progress'}
                            </span>
                          </div>
                          <div className="flex items-center justify-between mb-3">
                            <span className="font-semibold">Total: ₹{order.totalAmount}</span>
                            <Badge variant="secondary">{order.paymentMethod}</Badge>
                          </div>
                          
                          {/* Order Items */}
                          <div className="mb-3">
                            <p className="text-sm font-medium text-muted-foreground mb-2">Items:</p>
                            <div className="space-y-2">
                              {order.items?.map((item, index) => (
                                <div key={index} className="flex items-center space-x-3">
                                  <img 
                                    src={item.image} 
                                    alt={item.name}
                                    className="w-8 h-8 rounded object-cover"
                                    onError={(e) => {
                                      e.currentTarget.src = 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=32&h=32&fit=crop&crop=center';
                                    }}
                                  />
                                  <div className="flex-1">
                                    <p className="text-sm font-medium">{item.name}</p>
                                    <p className="text-xs text-muted-foreground">
                                      Qty: {item.quantity} × ₹{item.price}
                                    </p>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                          
                          <Button
                            size="sm"
                            className="w-full bg-chart-2 hover:bg-chart-2/90"
                            onClick={() => handleOrderStatusUpdate(order.id, 'ready')}
                            data-testid={`button-ready-${order.id}`}
                          >
                            Mark as Ready
                          </Button>
                        </CardContent>
                      </Card>
                    ))
                  )}
                </CardContent>
              </Card>

              {/* Ready Orders */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>Ready</CardTitle>
                    <Badge variant="outline" data-testid="badge-ready-orders">
                      {readyOrders.length} ready
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {readyOrders.length === 0 ? (
                    <div className="text-center py-8">
                      <i className="fas fa-check-circle text-2xl text-muted-foreground mb-2"></i>
                      <p className="text-muted-foreground">No orders ready</p>
                    </div>
                  ) : (
                    readyOrders.map((order) => (
                      <Card key={order.id} className="border-l-4 border-l-chart-2 bg-chart-2/5">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <span className="font-medium text-foreground">
                              {order.orderNumber}
                            </span>
                            <span className="text-sm text-chart-2 font-medium">Ready</span>
                          </div>
                          <div className="flex items-center justify-between mb-3">
                            <span className="font-semibold">Total: ₹{order.total}</span>
                            <Badge variant="secondary">{order.orderType}</Badge>
                          </div>
                          <Button
                            size="sm"
                            className="w-full"
                            onClick={() => handleOrderStatusUpdate(order.id, order.orderType === 'delivery' ? 'dispatched' : 'delivered')}
                            data-testid={`button-dispatch-${order.id}`}
                          >
                            {order.orderType === 'delivery' ? 'Mark as Dispatched' : 'Mark as Completed'}
                          </Button>
                        </CardContent>
                      </Card>
                    ))
                  )}
                </CardContent>
              </Card>
            </div>
          )}
        </TabsContent>

        <TabsContent value="menu" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Current Menu Items */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center">
                    <List className="h-5 w-5 mr-2 text-primary" />
                    Current Menu ({menuItems.length} items)
                  </CardTitle>
                  <Button 
                    size="sm" 
                    variant="outline"
                    onClick={() => setShowAddItemForm(true)}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Item
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-3">
                {menuItems.length === 0 ? (
                  <div className="text-center py-8">
                    <UtensilsCrossed className="h-8 w-8 text-muted-foreground mb-2 mx-auto" />
                    <p className="text-muted-foreground">No menu items yet</p>
                    <Button 
                      size="sm" 
                      variant="outline" 
                      className="mt-2"
                      onClick={() => setShowAddItemForm(true)}
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Add First Item
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {menuItems.map((item) => (
                      <div 
                        key={item.id} 
                        className={`flex items-center justify-between p-3 border rounded-lg ${
                          !item.isAvailable ? 'opacity-60' : ''
                        }`}
                      >
                        <div className="flex items-center space-x-3">
                          <img 
                            src={item.image} 
                            alt={item.name}
                            className="w-12 h-12 rounded-lg object-cover border-2 border-border"
                            onError={(e) => {
                              e.currentTarget.src = 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=48&h=48&fit=crop&crop=center';
                            }}
                          />
                          <div>
                            <h4 className="font-medium">{item.name}</h4>
                            <p className="text-sm text-muted-foreground">
                              ₹{item.price} • {item.isAvailable ? 'Available' : 'Out of Stock'}
                            </p>
                            <p className="text-xs text-muted-foreground">{item.category}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge 
                            variant={item.isAvailable ? "outline" : "secondary"}
                            className={item.isAvailable ? "bg-chart-2/10 text-chart-2" : ""}
                          >
                            <Eye className={`h-4 w-4 mr-1`} />
                            {item.isAvailable ? 'Active' : 'Inactive'}
                          </Badge>
                          <Button 
                            size="sm" 
                            variant="ghost"
                            onClick={() => setEditingItem(item)}
                            title="Edit item"
                            disabled={updateMenuItemMutation.isPending}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button 
                            size="sm" 
                            variant="ghost"
                            onClick={() => handleToggleItemAvailability(item.id)}
                            title={item.isAvailable ? 'Mark as unavailable' : 'Mark as available'}
                            disabled={updateMenuItemMutation.isPending}
                          >
                            {item.isAvailable ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                          </Button>
                          <Button 
                            size="sm" 
                            variant="ghost"
                            onClick={() => handleDeleteItem(item.id)}
                            title="Delete item"
                            className="text-destructive hover:text-destructive"
                            disabled={deleteMenuItemMutation.isPending}
                          >
                            {deleteMenuItemMutation.isPending && deleteMenuItemMutation.variables === item.id ? (
                              <Loader2 className="h-4 w-4 animate-spin" />
                            ) : (
                              <Trash2 className="h-4 w-4" />
                            )}
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Inventory Status */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Warehouse className="h-5 w-5 mr-2 text-primary" />
                  Inventory Status
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                    <div className="flex items-center justify-between p-3 bg-chart-2/5 border border-chart-2/20 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <Wheat className="h-8 w-8 text-chart-2" />
                        <div>
                          <h4 className="font-medium">Roti/Naan</h4>
                          <p className="text-sm text-muted-foreground">Wheat flour stock</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold text-chart-2">85</div>
                        <div className="text-xs text-muted-foreground">units left</div>
                      </div>
                    </div>
                  
                  <div className="flex items-center justify-between p-3 bg-chart-3/5 border border-chart-3/20 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Milk className="h-8 w-8 text-chart-3" />
                      <div>
                        <h4 className="font-medium">Paneer</h4>
                        <p className="text-sm text-muted-foreground">Fresh cottage cheese</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-lg font-bold text-chart-3">12</div>
                      <div className="text-xs text-muted-foreground">kg left</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 bg-destructive/5 border border-destructive/20 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Beef className="h-8 w-8 text-destructive" />
                      <div>
                        <h4 className="font-medium">Chicken</h4>
                        <p className="text-sm text-muted-foreground">Fresh chicken cuts</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-lg font-bold text-destructive">0</div>
                      <div className="text-xs text-muted-foreground">kg left</div>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between p-3 bg-chart-1/5 border border-chart-1/20 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <Leaf className="h-8 w-8 text-chart-1" />
                      <div>
                        <h4 className="font-medium">Vegetables</h4>
                        <p className="text-sm text-muted-foreground">Mixed vegetables</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-lg font-bold text-chart-1">28</div>
                      <div className="text-xs text-muted-foreground">kg left</div>
                    </div>
                  </div>
                </div>
                
                <div className="pt-4 border-t">
                  <Button 
                    className="w-full" 
                    variant="outline"
                    onClick={handleInventoryUpdate}
                    disabled={showInventoryUpdate}
                  >
                    {showInventoryUpdate ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Updating...
                      </>
                    ) : (
                      <>
                        <Plus className="h-4 w-4 mr-2" />
                        Update Inventory
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Add Item Form Modal */}
          {showAddItemForm && (
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Add New Menu Item</span>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => setShowAddItemForm(false)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <AddItemForm 
                  onAddItem={handleAddItem}
                  onCancel={() => setShowAddItemForm(false)}
                  isLoading={addMenuItemMutation.isPending}
                />
              </CardContent>
            </Card>
          )}
          
          {/* Edit Item Form Modal */}
          {editingItem && (
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Edit Menu Item</span>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={() => setEditingItem(null)}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <EditItemForm 
                  item={editingItem}
                  onEditItem={(updates: any) => {
                    handleEditItem(editingItem.id, updates);
                    setEditingItem(null);
                  }}
                  onCancel={() => setEditingItem(null)}
                  isLoading={updateMenuItemMutation.isPending}
                />
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-primary mb-2" data-testid="text-orders-today">
                  {todayOrders.length}
                </div>
                <div className="text-sm text-muted-foreground">Orders Today</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-chart-2 mb-2" data-testid="text-revenue-today">
                  ₹{todayRevenue}
                </div>
                <div className="text-sm text-muted-foreground">Revenue Today</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-chart-3 mb-2">
                  {restaurant.preparationTime}
                </div>
                <div className="text-sm text-muted-foreground">Avg Prep Time</div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6 text-center">
                <div className="text-3xl font-bold text-chart-5 mb-2">
                  {restaurant.rating}
                </div>
                <div className="text-sm text-muted-foreground">Rating</div>
              </CardContent>
            </Card>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <i className="fas fa-chart-pie mr-2 text-primary"></i>
                  Order Types Distribution
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {['delivery', 'dine-in', 'takeaway'].map((type) => {
                    const typeOrders = todayOrders.filter(order => order.orderType === type);
                    const percentage = todayOrders.length > 0 ? Math.round((typeOrders.length / todayOrders.length) * 100) : 0;
                    
                    return (
                      <div key={type} className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <i className={`fas ${
                            type === 'delivery' ? 'fa-truck' : 
                            type === 'dine-in' ? 'fa-utensils' : 'fa-shopping-bag'
                          } text-primary`}></i>
                          <span className="text-muted-foreground capitalize">{type}</span>
                        </div>
                        <span className="text-foreground font-medium">
                          {typeOrders.length} ({percentage}%)
                        </span>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <i className="fas fa-star mr-2 text-primary"></i>
                  Popular Items & Activity
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Popular Items Section */}
                  <div>
                    <h4 className="text-sm font-medium text-muted-foreground mb-3">Most Ordered Today</h4>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between p-2 bg-chart-2/10 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <i className="fas fa-medal text-chart-2"></i>
                          <span className="font-medium">Masala Dosa</span>
                        </div>
                        <span className="text-sm text-chart-2 font-medium">8 orders</span>
                      </div>
                      <div className="flex items-center justify-between p-2 bg-chart-3/10 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <i className="fas fa-award text-chart-3"></i>
                          <span className="font-medium">Paneer Butter Masala</span>
                        </div>
                        <span className="text-sm text-chart-3 font-medium">6 orders</span>
                      </div>
                      <div className="flex items-center justify-between p-2 bg-chart-1/10 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <i className="fas fa-trophy text-chart-1"></i>
                          <span className="font-medium">Cold Coffee</span>
                        </div>
                        <span className="text-sm text-chart-1 font-medium">5 orders</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="border-t pt-3">
                    <h4 className="text-sm font-medium text-muted-foreground mb-3">Recent Activity</h4>
                    <div className="space-y-2">
                      {orders?.slice(0, 3).map((order) => (
                        <div key={order.id} className="flex items-center justify-between">
                          <div>
                            <span className="text-sm font-medium">{order.orderNumber}</span>
                            <p className="text-xs text-muted-foreground">
                              {new Date(order.createdAt!).toLocaleTimeString()}
                            </p>
                          </div>
                          <Badge 
                            variant={
                              order.status === 'delivered' ? 'default' :
                              order.status === 'preparing' ? 'secondary' :
                              'outline'
                            }
                          >
                            {order.status}
                          </Badge>
                        </div>
                      )) || []}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}

// Add Item Form Component
function AddItemForm({ onAddItem, onCancel, isLoading }: { 
  onAddItem: (item: any) => void; 
  onCancel: () => void;
  isLoading?: boolean;
}) {
  const [formData, setFormData] = useState({
    name: '',
    price: '',
    description: '',
    category: 'Main Course',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name || !formData.price || isLoading) {
      return;
    }
    
    onAddItem({
      name: formData.name,
      price: parseInt(formData.price),
      description: formData.description,
      category: formData.category,
      isAvailable: true,
    });
    
    setFormData({ name: '', price: '', description: '', category: 'Main Course' });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium mb-2">Item Name</label>
        <input
          type="text"
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          placeholder="e.g., Chicken Biryani"
          required
          disabled={isLoading}
        />
      </div>
      
      <div>
        <label className="block text-sm font-medium mb-2">Price (₹)</label>
        <input
          type="number"
          value={formData.price}
          onChange={(e) => setFormData({ ...formData, price: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          placeholder="120"
          required
          disabled={isLoading}
        />
      </div>
      
      <div>
        <label className="block text-sm font-medium mb-2">Description</label>
        <textarea
          value={formData.description}
          onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          placeholder="Brief description of the item"
          rows={3}
          disabled={isLoading}
        />
      </div>
      
      <div>
        <label className="block text-sm font-medium mb-2">Category</label>
        <select
          value={formData.category}
          onChange={(e) => setFormData({ ...formData, category: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          disabled={isLoading}
        >
          <option value="Main Course">Main Course</option>
          <option value="Bread">Bread</option>
          <option value="South Indian">South Indian</option>
          <option value="Beverages">Beverages</option>
          <option value="Appetizer">Appetizer</option>
          <option value="Dessert">Dessert</option>
        </select>
      </div>
      
      <div className="flex space-x-2 pt-4">
        <Button type="submit" className="flex-1" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Adding...
            </>
          ) : (
            <>
              <Plus className="h-4 w-4 mr-2" />
              Add Item
            </>
          )}
        </Button>
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1" disabled={isLoading}>
          Cancel
        </Button>
      </div>
    </form>
  );
}

// Edit Item Form Component
function EditItemForm({ item, onEditItem, onCancel, isLoading }: {
  item: any;
  onEditItem: (updates: any) => void;
  onCancel: () => void;
  isLoading?: boolean;
}) {
  const [formData, setFormData] = useState({
    name: item.name || '',
    price: item.price?.toString() || '',
    description: item.description || '',
    category: item.category || 'Main Course',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name || !formData.price || isLoading) {
      return;
    }
    
    onEditItem({
      name: formData.name,
      price: parseInt(formData.price),
      description: formData.description,
      category: formData.category,
    });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium mb-2">Item Name</label>
        <input
          type="text"
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          placeholder="e.g., Chicken Biryani"
          required
          disabled={isLoading}
        />
      </div>
      
      <div>
        <label className="block text-sm font-medium mb-2">Price (₹)</label>
        <input
          type="number"
          value={formData.price}
          onChange={(e) => setFormData({ ...formData, price: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          placeholder="120"
          required
          disabled={isLoading}
        />
      </div>
      
      <div>
        <label className="block text-sm font-medium mb-2">Description</label>
        <textarea
          value={formData.description}
          onChange={(e) => setFormData({ ...formData, description: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          placeholder="Brief description of the item"
          rows={3}
          disabled={isLoading}
        />
      </div>
      
      <div>
        <label className="block text-sm font-medium mb-2">Category</label>
        <select
          value={formData.category}
          onChange={(e) => setFormData({ ...formData, category: e.target.value })}
          className="w-full p-2 border rounded-lg bg-background"
          disabled={isLoading}
        >
          <option value="Main Course">Main Course</option>
          <option value="Bread">Bread</option>
          <option value="South Indian">South Indian</option>
          <option value="Beverages">Beverages</option>
          <option value="Appetizer">Appetizer</option>
          <option value="Dessert">Dessert</option>
        </select>
      </div>
      
      <div className="flex space-x-2 pt-4">
        <Button type="submit" className="flex-1" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              Updating...
            </>
          ) : (
            <>
              <Save className="h-4 w-4 mr-2" />
              Update Item
            </>
          )}
        </Button>
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1" disabled={isLoading}>
          Cancel
        </Button>
      </div>
    </form>
  );
}
